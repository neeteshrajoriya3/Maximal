{"name": "test_get_all_projects", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\neete\\\\Downloads\\\\logs\\\\test_log.log'", "trace": "self = <FixtureRequest for <Function test_get_all_projects>>, argname = 'jira_api'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n    \n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n>       fixturedef = self._get_active_fixturedef(argname)\n\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:585: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:607: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:693: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:1069: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:1123: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:902: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\nconftest.py:7: in jira_api\n    return JiraProjectAPI()\nutils\\jira_project_api.py:14: in __init__\n    self.logger=LogGen.loggen()\nutils\\customlogger.py:9: in loggen\n    fhandler = logging.FileHandler(filename=r\"..\\logs\\test_log.log\", mode=\"a\")\nC:\\Program Files\\Python312\\Lib\\logging\\__init__.py:1231: in __init__\n    StreamHandler.__init__(self, self._open())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'FileHandler' object has no attribute 'level'\") raised in repr()] FileHandler object at 0x1e18c560f20>\n\n    def _open(self):\n        \"\"\"\n        Open the current base file with the (original) mode and encoding.\n        Return the resulting stream.\n        \"\"\"\n        open_func = self._builtin_open\n>       return open_func(self.baseFilename, self.mode,\n                         encoding=self.encoding, errors=self.errors)\nE       FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\neete\\\\Downloads\\\\logs\\\\test_log.log'\n\nC:\\Program Files\\Python312\\Lib\\logging\\__init__.py:1263: FileNotFoundError"}, "description": "../features/test.feature: Get all Projects", "start": 1744539098801, "stop": 1744539098804, "uuid": "f69e2eea-dff9-476c-8d73-1e5e9a6da44e", "historyId": "758ba82cc872c9ca9f784503ede674ce", "testCaseId": "758ba82cc872c9ca9f784503ede674ce", "fullName": "tests.test_jira_project#test_get_all_projects", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_jira_project"}, {"name": "host", "value": "user"}, {"name": "thread", "value": "23004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_jira_project"}]}